{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst currentTime = Date.now();\nlet userSelectedDate;\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate < currentTime) {\n      iziToast.show({\n        message: 'Please choose a date in the future',\n        backgroundColor: 'red',\n        messageColor: 'white',\n      });\n      btnElement.disabled = true;\n    } else {\n      btnElement.disabled = false;\n    }\n  },\n};\nconst myInput = document.querySelector('#datetime-picker');\nconst fp = flatpickr(myInput, options);\n\nconst timerEl = {\n  dayEl: document.querySelector('[data-days]'),\n  hourEl: document.querySelector('[data-hours]'),\n  minEl: document.querySelector('[data-minutes]'),\n  secEl: document.querySelector('[data-seconds]'),\n};\n\nconst btnElement = document.querySelector('button');\nbtnElement.addEventListener('click', () => {\n  btnElement.disabled = true;\n  const setIntervalId = setInterval(() => {\n    const currentTime = Date.now();\n    const diff = userSelectedDate - currentTime;\n    const timeObj = convertMs(diff);\n    updateTimerDisplay(timeObj);\n  }, 1000);\n  setTimeout(() => {\n    clearInterval(setIntervalId);\n  }, timeObj);\n});\n\nfunction updateTimerDisplay(timeObj) {\n  timerEl.dayEl.textContent = addLeadingZero(timeObj.days);\n  timerEl.hourEl.textContent = addLeadingZero(timeObj.hours);\n  timerEl.minEl.textContent = addLeadingZero(timeObj.minutes);\n  timerEl.secEl.textContent = addLeadingZero(timeObj.seconds);\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, '0');\n}\n"],"names":["currentTime","userSelectedDate","options","selectedDates","iziToast","btnElement","myInput","flatpickr","timerEl","setIntervalId","diff","timeObj","convertMs","updateTimerDisplay","addLeadingZero","ms","days","hours","minutes","seconds","value"],"mappings":"2GAMA,MAAMA,EAAc,KAAK,MACzB,IAAIC,EACJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBF,EAAmBE,EAAc,CAAC,EAC9BF,EAAmBD,GACrBI,EAAS,KAAK,CACZ,QAAS,qCACT,gBAAiB,MACjB,aAAc,OACtB,CAAO,EACDC,EAAW,SAAW,IAEtBA,EAAW,SAAW,EAEzB,CACH,EACMC,EAAU,SAAS,cAAc,kBAAkB,EAC9CC,EAAUD,EAASJ,CAAO,EAErC,MAAMM,EAAU,CACd,MAAO,SAAS,cAAc,aAAa,EAC3C,OAAQ,SAAS,cAAc,cAAc,EAC7C,MAAO,SAAS,cAAc,gBAAgB,EAC9C,MAAO,SAAS,cAAc,gBAAgB,CAChD,EAEMH,EAAa,SAAS,cAAc,QAAQ,EAClDA,EAAW,iBAAiB,QAAS,IAAM,CACzCA,EAAW,SAAW,GACtB,MAAMI,EAAgB,YAAY,IAAM,CACtC,MAAMT,EAAc,KAAK,MACnBU,EAAOT,EAAmBD,EAC1BW,EAAUC,EAAUF,CAAI,EAC9BG,EAAmBF,CAAO,CAC3B,EAAE,GAAI,EACP,WAAW,IAAM,CACf,cAAcF,CAAa,CAC5B,EAAE,OAAO,CACZ,CAAC,EAED,SAASI,EAAmBF,EAAS,CACnCH,EAAQ,MAAM,YAAcM,EAAeH,EAAQ,IAAI,EACvDH,EAAQ,OAAO,YAAcM,EAAeH,EAAQ,KAAK,EACzDH,EAAQ,MAAM,YAAcM,EAAeH,EAAQ,OAAO,EAC1DH,EAAQ,MAAM,YAAcM,EAAeH,EAAQ,OAAO,CAC5D,CAEA,SAASC,EAAUG,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASL,EAAeM,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC"}